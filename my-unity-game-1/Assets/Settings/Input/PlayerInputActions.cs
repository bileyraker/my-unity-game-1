//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Settings/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Birdy
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""WorldCamera"",
            ""id"": ""e14be6c7-3b10-4f36-a403-0530c141d4e9"",
            ""actions"": [
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""1081f2c6-e3f3-4c8b-95f0-c7a219871335"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""9b963163-1cd8-4442-9225-a8e5b1fa651d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PanDrag"",
                    ""type"": ""Button"",
                    ""id"": ""980d8d3f-edaa-4f7c-84a7-568b1c7db38d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""4d3eb00c-1d84-45f8-b35a-6498d9e0649d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelActivate"",
                    ""type"": ""Button"",
                    ""id"": ""2aa8005b-e5d6-4cdf-b072-e09c27f08a87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""2162a357-e732-451d-95be-e63032870d6e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b13b6fc8-c2ba-4db0-8f3f-8f726b84c805"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""630a2ddd-55c9-4a93-b273-07b341b9ffe5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4edfdf5d-5653-4e00-b77f-36d6f369a718"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e64277b9-c2c4-4f32-bbcc-767d0afc2628"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c09cdde0-d165-424e-b86f-0fa292816236"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3825050d-1e3d-402b-a4eb-34ce8335de7c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PanDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47dd17e4-feb6-48ff-b933-45d4008eae34"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d60798ef-33f0-4edf-9d74-eef0381f257b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ef738434-a08e-4fdb-9451-e9d8d77ff753"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4cf2510-4b3f-49b5-a865-a34072c58a36"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CancelActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // WorldCamera
            m_WorldCamera = asset.FindActionMap("WorldCamera", throwIfNotFound: true);
            m_WorldCamera_Pan = m_WorldCamera.FindAction("Pan", throwIfNotFound: true);
            m_WorldCamera_Zoom = m_WorldCamera.FindAction("Zoom", throwIfNotFound: true);
            m_WorldCamera_PanDrag = m_WorldCamera.FindAction("PanDrag", throwIfNotFound: true);
            m_WorldCamera_Activate = m_WorldCamera.FindAction("Activate", throwIfNotFound: true);
            m_WorldCamera_CancelActivate = m_WorldCamera.FindAction("CancelActivate", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // WorldCamera
        private readonly InputActionMap m_WorldCamera;
        private List<IWorldCameraActions> m_WorldCameraActionsCallbackInterfaces = new List<IWorldCameraActions>();
        private readonly InputAction m_WorldCamera_Pan;
        private readonly InputAction m_WorldCamera_Zoom;
        private readonly InputAction m_WorldCamera_PanDrag;
        private readonly InputAction m_WorldCamera_Activate;
        private readonly InputAction m_WorldCamera_CancelActivate;
        public struct WorldCameraActions
        {
            private @PlayerInputActions m_Wrapper;
            public WorldCameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pan => m_Wrapper.m_WorldCamera_Pan;
            public InputAction @Zoom => m_Wrapper.m_WorldCamera_Zoom;
            public InputAction @PanDrag => m_Wrapper.m_WorldCamera_PanDrag;
            public InputAction @Activate => m_Wrapper.m_WorldCamera_Activate;
            public InputAction @CancelActivate => m_Wrapper.m_WorldCamera_CancelActivate;
            public InputActionMap Get() { return m_Wrapper.m_WorldCamera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldCameraActions set) { return set.Get(); }
            public void AddCallbacks(IWorldCameraActions instance)
            {
                if (instance == null || m_Wrapper.m_WorldCameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WorldCameraActionsCallbackInterfaces.Add(instance);
                @Pan.started += instance.OnPan;
                @Pan.performed += instance.OnPan;
                @Pan.canceled += instance.OnPan;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @PanDrag.started += instance.OnPanDrag;
                @PanDrag.performed += instance.OnPanDrag;
                @PanDrag.canceled += instance.OnPanDrag;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @CancelActivate.started += instance.OnCancelActivate;
                @CancelActivate.performed += instance.OnCancelActivate;
                @CancelActivate.canceled += instance.OnCancelActivate;
            }

            private void UnregisterCallbacks(IWorldCameraActions instance)
            {
                @Pan.started -= instance.OnPan;
                @Pan.performed -= instance.OnPan;
                @Pan.canceled -= instance.OnPan;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
                @PanDrag.started -= instance.OnPanDrag;
                @PanDrag.performed -= instance.OnPanDrag;
                @PanDrag.canceled -= instance.OnPanDrag;
                @Activate.started -= instance.OnActivate;
                @Activate.performed -= instance.OnActivate;
                @Activate.canceled -= instance.OnActivate;
                @CancelActivate.started -= instance.OnCancelActivate;
                @CancelActivate.performed -= instance.OnCancelActivate;
                @CancelActivate.canceled -= instance.OnCancelActivate;
            }

            public void RemoveCallbacks(IWorldCameraActions instance)
            {
                if (m_Wrapper.m_WorldCameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWorldCameraActions instance)
            {
                foreach (var item in m_Wrapper.m_WorldCameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WorldCameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WorldCameraActions @WorldCamera => new WorldCameraActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IWorldCameraActions
        {
            void OnPan(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnPanDrag(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnCancelActivate(InputAction.CallbackContext context);
        }
    }
}
